/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    pair<ListNode *, ListNode *> getMiddle(ListNode *head){
        ListNode *slow = head;
        ListNode *prev = slow;
        ListNode *fast = head != nullptr && head->next != nullptr ? head->next->next : nullptr;
        
        while(fast != nullptr){
            prev = slow;
            slow = slow->next;
            fast = fast->next != nullptr ? fast->next->next : nullptr;
        }
        
        return make_pair(prev,slow);
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        
       if(head == nullptr){
           return nullptr;
       }
        
       pair<ListNode *,ListNode *> p = getMiddle(head);
       
       TreeNode *m = new TreeNode(p.second->val);
        
       if(p.first != p.second){
           p.first->next = nullptr;
           m->left = sortedListToBST(head);
       }
        
       m->right = sortedListToBST(p.second->next);
       return m;
    }
};